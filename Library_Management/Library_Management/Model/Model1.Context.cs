//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Library_Management.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Library_ManagementEntities : DbContext
    {
        public Library_ManagementEntities()
            : base("name=Library_ManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Author> Authors { get; set; }
        public virtual DbSet<AuthorityHuman> AuthorityHumen { get; set; }
        public virtual DbSet<AuthorityStaff> AuthorityStaffs { get; set; }
        public virtual DbSet<BillBookOfCustomer> BillBookOfCustomers { get; set; }
        public virtual DbSet<BillBookOfHuman> BillBookOfHumen { get; set; }
        public virtual DbSet<BillCustomerReturnBookLibrary> BillCustomerReturnBookLibraries { get; set; }
        public virtual DbSet<BillReturnBookHuman> BillReturnBookHumen { get; set; }
        public virtual DbSet<Book> Books { get; set; }
        public virtual DbSet<BookSubject> BookSubjects { get; set; }
        public virtual DbSet<BorrowBook> BorrowBooks { get; set; }
        public virtual DbSet<Fined> Fineds { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<HistoryCreateTimeTable> HistoryCreateTimeTables { get; set; }
        public virtual DbSet<Human> Humen { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<LibraryRegulation> LibraryRegulations { get; set; }
        public virtual DbSet<ListBookCustomerBorrow> ListBookCustomerBorrows { get; set; }
        public virtual DbSet<ListBookCustomerReturnBookLibrary> ListBookCustomerReturnBookLibraries { get; set; }
        public virtual DbSet<ListBookLibraryBorrowHuman> ListBookLibraryBorrowHumen { get; set; }
        public virtual DbSet<ListDetleImage> ListDetleImages { get; set; }
        public virtual DbSet<ListReturnBookHuman> ListReturnBookHumen { get; set; }
        public virtual DbSet<Publisher> Publishers { get; set; }
        public virtual DbSet<SoftwareFilePath> SoftwareFilePaths { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<StatusBill> StatusBills { get; set; }
        public virtual DbSet<StatusChangePass> StatusChangePasses { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TimeLine> TimeLines { get; set; }
        public virtual DbSet<TimeTable> TimeTables { get; set; }
        public virtual DbSet<UserHuman> UserHumen { get; set; }
        public virtual DbSet<UserStaff> UserStaffs { get; set; }
        public virtual DbSet<BookAvailable_vi> BookAvailable_vi { get; set; }
        public virtual DbSet<BookBorrowed_vi> BookBorrowed_vi { get; set; }
        public virtual DbSet<BookLiquidation_vi> BookLiquidation_vi { get; set; }
        public virtual DbSet<BorrowBooks_vi> BorrowBooks_vi { get; set; }
        public virtual DbSet<Human_vi> Human_vi { get; set; }
    
        [DbFunction("Library_ManagementEntities", "load_data_Author")]
        public virtual IQueryable<load_data_Author_Result> load_data_Author(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<load_data_Author_Result>("[Library_ManagementEntities].[load_data_Author](@name)", nameParameter);
        }
    
        [DbFunction("Library_ManagementEntities", "load_data_BookSubject")]
        public virtual IQueryable<load_data_BookSubject_Result> load_data_BookSubject(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<load_data_BookSubject_Result>("[Library_ManagementEntities].[load_data_BookSubject](@name)", nameParameter);
        }
    
        public virtual int Add_Author(string displayName, string address, string phone, string email, string note, Nullable<int> countDelete)
        {
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_Author", displayNameParameter, addressParameter, phoneParameter, emailParameter, noteParameter, countDeleteParameter);
        }
    
        public virtual int Add_BillBookOfCustomer(Nullable<int> idHuman, Nullable<int> idStaff, Nullable<System.DateTime> borrowedDate, Nullable<System.DateTime> dateOfRepayment, Nullable<double> cashReceived, Nullable<int> idStatusBill, string note, Nullable<int> countDelete)
        {
            var idHumanParameter = idHuman.HasValue ?
                new ObjectParameter("IdHuman", idHuman) :
                new ObjectParameter("IdHuman", typeof(int));
    
            var idStaffParameter = idStaff.HasValue ?
                new ObjectParameter("IdStaff", idStaff) :
                new ObjectParameter("IdStaff", typeof(int));
    
            var borrowedDateParameter = borrowedDate.HasValue ?
                new ObjectParameter("BorrowedDate", borrowedDate) :
                new ObjectParameter("BorrowedDate", typeof(System.DateTime));
    
            var dateOfRepaymentParameter = dateOfRepayment.HasValue ?
                new ObjectParameter("DateOfRepayment", dateOfRepayment) :
                new ObjectParameter("DateOfRepayment", typeof(System.DateTime));
    
            var cashReceivedParameter = cashReceived.HasValue ?
                new ObjectParameter("CashReceived", cashReceived) :
                new ObjectParameter("CashReceived", typeof(double));
    
            var idStatusBillParameter = idStatusBill.HasValue ?
                new ObjectParameter("IdStatusBill", idStatusBill) :
                new ObjectParameter("IdStatusBill", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_BillBookOfCustomer", idHumanParameter, idStaffParameter, borrowedDateParameter, dateOfRepaymentParameter, cashReceivedParameter, idStatusBillParameter, noteParameter, countDeleteParameter);
        }
    
        public virtual int Add_BillBookOfHuman(Nullable<int> idHuman, Nullable<int> idStaff, Nullable<System.DateTime> borrowedDate, Nullable<System.DateTime> dateOfRepayment, string note, Nullable<int> idStatusBill, Nullable<int> countDelete)
        {
            var idHumanParameter = idHuman.HasValue ?
                new ObjectParameter("IdHuman", idHuman) :
                new ObjectParameter("IdHuman", typeof(int));
    
            var idStaffParameter = idStaff.HasValue ?
                new ObjectParameter("IdStaff", idStaff) :
                new ObjectParameter("IdStaff", typeof(int));
    
            var borrowedDateParameter = borrowedDate.HasValue ?
                new ObjectParameter("BorrowedDate", borrowedDate) :
                new ObjectParameter("BorrowedDate", typeof(System.DateTime));
    
            var dateOfRepaymentParameter = dateOfRepayment.HasValue ?
                new ObjectParameter("DateOfRepayment", dateOfRepayment) :
                new ObjectParameter("DateOfRepayment", typeof(System.DateTime));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var idStatusBillParameter = idStatusBill.HasValue ?
                new ObjectParameter("IdStatusBill", idStatusBill) :
                new ObjectParameter("IdStatusBill", typeof(int));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_BillBookOfHuman", idHumanParameter, idStaffParameter, borrowedDateParameter, dateOfRepaymentParameter, noteParameter, idStatusBillParameter, countDeleteParameter);
        }
    
        public virtual int Add_BillCustomerReturnBookLibrary(Nullable<int> idHuman, Nullable<int> idStaff, Nullable<System.DateTime> dateOfRepayment, Nullable<double> allTheDepositAmount, Nullable<double> cashReceived, Nullable<double> customerFined, Nullable<double> allFines, Nullable<int> idStatusBill, string note, Nullable<int> countDelete)
        {
            var idHumanParameter = idHuman.HasValue ?
                new ObjectParameter("IdHuman", idHuman) :
                new ObjectParameter("IdHuman", typeof(int));
    
            var idStaffParameter = idStaff.HasValue ?
                new ObjectParameter("IdStaff", idStaff) :
                new ObjectParameter("IdStaff", typeof(int));
    
            var dateOfRepaymentParameter = dateOfRepayment.HasValue ?
                new ObjectParameter("DateOfRepayment", dateOfRepayment) :
                new ObjectParameter("DateOfRepayment", typeof(System.DateTime));
    
            var allTheDepositAmountParameter = allTheDepositAmount.HasValue ?
                new ObjectParameter("AllTheDepositAmount", allTheDepositAmount) :
                new ObjectParameter("AllTheDepositAmount", typeof(double));
    
            var cashReceivedParameter = cashReceived.HasValue ?
                new ObjectParameter("CashReceived", cashReceived) :
                new ObjectParameter("CashReceived", typeof(double));
    
            var customerFinedParameter = customerFined.HasValue ?
                new ObjectParameter("CustomerFined", customerFined) :
                new ObjectParameter("CustomerFined", typeof(double));
    
            var allFinesParameter = allFines.HasValue ?
                new ObjectParameter("AllFines", allFines) :
                new ObjectParameter("AllFines", typeof(double));
    
            var idStatusBillParameter = idStatusBill.HasValue ?
                new ObjectParameter("IdStatusBill", idStatusBill) :
                new ObjectParameter("IdStatusBill", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_BillCustomerReturnBookLibrary", idHumanParameter, idStaffParameter, dateOfRepaymentParameter, allTheDepositAmountParameter, cashReceivedParameter, customerFinedParameter, allFinesParameter, idStatusBillParameter, noteParameter, countDeleteParameter);
        }
    
        public virtual int Add_BillReturnBookHuman(Nullable<int> idHuman, Nullable<int> idStaff, Nullable<System.DateTime> dateOfRepayment, Nullable<int> idStatusBill, Nullable<double> libraryFined, string note, Nullable<int> countDelete)
        {
            var idHumanParameter = idHuman.HasValue ?
                new ObjectParameter("IdHuman", idHuman) :
                new ObjectParameter("IdHuman", typeof(int));
    
            var idStaffParameter = idStaff.HasValue ?
                new ObjectParameter("IdStaff", idStaff) :
                new ObjectParameter("IdStaff", typeof(int));
    
            var dateOfRepaymentParameter = dateOfRepayment.HasValue ?
                new ObjectParameter("DateOfRepayment", dateOfRepayment) :
                new ObjectParameter("DateOfRepayment", typeof(System.DateTime));
    
            var idStatusBillParameter = idStatusBill.HasValue ?
                new ObjectParameter("IdStatusBill", idStatusBill) :
                new ObjectParameter("IdStatusBill", typeof(int));
    
            var libraryFinedParameter = libraryFined.HasValue ?
                new ObjectParameter("LibraryFined", libraryFined) :
                new ObjectParameter("LibraryFined", typeof(double));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_BillReturnBookHuman", idHumanParameter, idStaffParameter, dateOfRepaymentParameter, idStatusBillParameter, libraryFinedParameter, noteParameter, countDeleteParameter);
        }
    
        public virtual int Add_Book(string displayName, Nullable<double> bookPrice, Nullable<int> borrowingIdHuman, string bookSubject, string author, Nullable<int> idLanguage, Nullable<int> idPublisher, Nullable<int> idStatus, Nullable<int> idStatusReturnBookToHuman, Nullable<System.DateTime> libraryDateBorrowed, Nullable<System.DateTime> libraryDueDate, string color, Nullable<System.DateTime> dateReturnBookToHuman, string urlImageBook, string note, Nullable<int> countDelete)
        {
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var bookPriceParameter = bookPrice.HasValue ?
                new ObjectParameter("BookPrice", bookPrice) :
                new ObjectParameter("BookPrice", typeof(double));
    
            var borrowingIdHumanParameter = borrowingIdHuman.HasValue ?
                new ObjectParameter("BorrowingIdHuman", borrowingIdHuman) :
                new ObjectParameter("BorrowingIdHuman", typeof(int));
    
            var bookSubjectParameter = bookSubject != null ?
                new ObjectParameter("BookSubject", bookSubject) :
                new ObjectParameter("BookSubject", typeof(string));
    
            var authorParameter = author != null ?
                new ObjectParameter("Author", author) :
                new ObjectParameter("Author", typeof(string));
    
            var idLanguageParameter = idLanguage.HasValue ?
                new ObjectParameter("IdLanguage", idLanguage) :
                new ObjectParameter("IdLanguage", typeof(int));
    
            var idPublisherParameter = idPublisher.HasValue ?
                new ObjectParameter("IdPublisher", idPublisher) :
                new ObjectParameter("IdPublisher", typeof(int));
    
            var idStatusParameter = idStatus.HasValue ?
                new ObjectParameter("IdStatus", idStatus) :
                new ObjectParameter("IdStatus", typeof(int));
    
            var idStatusReturnBookToHumanParameter = idStatusReturnBookToHuman.HasValue ?
                new ObjectParameter("IdStatusReturnBookToHuman", idStatusReturnBookToHuman) :
                new ObjectParameter("IdStatusReturnBookToHuman", typeof(int));
    
            var libraryDateBorrowedParameter = libraryDateBorrowed.HasValue ?
                new ObjectParameter("LibraryDateBorrowed", libraryDateBorrowed) :
                new ObjectParameter("LibraryDateBorrowed", typeof(System.DateTime));
    
            var libraryDueDateParameter = libraryDueDate.HasValue ?
                new ObjectParameter("LibraryDueDate", libraryDueDate) :
                new ObjectParameter("LibraryDueDate", typeof(System.DateTime));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var dateReturnBookToHumanParameter = dateReturnBookToHuman.HasValue ?
                new ObjectParameter("DateReturnBookToHuman", dateReturnBookToHuman) :
                new ObjectParameter("DateReturnBookToHuman", typeof(System.DateTime));
    
            var urlImageBookParameter = urlImageBook != null ?
                new ObjectParameter("UrlImageBook", urlImageBook) :
                new ObjectParameter("UrlImageBook", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_Book", displayNameParameter, bookPriceParameter, borrowingIdHumanParameter, bookSubjectParameter, authorParameter, idLanguageParameter, idPublisherParameter, idStatusParameter, idStatusReturnBookToHumanParameter, libraryDateBorrowedParameter, libraryDueDateParameter, colorParameter, dateReturnBookToHumanParameter, urlImageBookParameter, noteParameter, countDeleteParameter);
        }
    
        public virtual int Add_BookSubject(string displayName, Nullable<int> scoreInputSubject, Nullable<int> scoreOuputSubject, string note, Nullable<int> countDelete)
        {
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var scoreInputSubjectParameter = scoreInputSubject.HasValue ?
                new ObjectParameter("ScoreInputSubject", scoreInputSubject) :
                new ObjectParameter("ScoreInputSubject", typeof(int));
    
            var scoreOuputSubjectParameter = scoreOuputSubject.HasValue ?
                new ObjectParameter("ScoreOuputSubject", scoreOuputSubject) :
                new ObjectParameter("ScoreOuputSubject", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_BookSubject", displayNameParameter, scoreInputSubjectParameter, scoreOuputSubjectParameter, noteParameter, countDeleteParameter);
        }
    
        public virtual int Add_BorrowBooks(Nullable<int> idHuman, Nullable<int> idBook, Nullable<System.DateTime> dateBorrowed, Nullable<System.DateTime> dueDate, Nullable<int> idStatus, Nullable<int> idFined, string color, Nullable<double> contractualFine, string note, Nullable<int> countDelete)
        {
            var idHumanParameter = idHuman.HasValue ?
                new ObjectParameter("IdHuman", idHuman) :
                new ObjectParameter("IdHuman", typeof(int));
    
            var idBookParameter = idBook.HasValue ?
                new ObjectParameter("IdBook", idBook) :
                new ObjectParameter("IdBook", typeof(int));
    
            var dateBorrowedParameter = dateBorrowed.HasValue ?
                new ObjectParameter("DateBorrowed", dateBorrowed) :
                new ObjectParameter("DateBorrowed", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var idStatusParameter = idStatus.HasValue ?
                new ObjectParameter("IdStatus", idStatus) :
                new ObjectParameter("IdStatus", typeof(int));
    
            var idFinedParameter = idFined.HasValue ?
                new ObjectParameter("IdFined", idFined) :
                new ObjectParameter("IdFined", typeof(int));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var contractualFineParameter = contractualFine.HasValue ?
                new ObjectParameter("ContractualFine", contractualFine) :
                new ObjectParameter("ContractualFine", typeof(double));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_BorrowBooks", idHumanParameter, idBookParameter, dateBorrowedParameter, dueDateParameter, idStatusParameter, idFinedParameter, colorParameter, contractualFineParameter, noteParameter, countDeleteParameter);
        }
    
        public virtual int Add_HistoryCreateTimeTable(Nullable<int> idUserStaff, string displayName, Nullable<System.DateTime> dateCreate)
        {
            var idUserStaffParameter = idUserStaff.HasValue ?
                new ObjectParameter("IdUserStaff", idUserStaff) :
                new ObjectParameter("IdUserStaff", typeof(int));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var dateCreateParameter = dateCreate.HasValue ?
                new ObjectParameter("DateCreate", dateCreate) :
                new ObjectParameter("DateCreate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_HistoryCreateTimeTable", idUserStaffParameter, displayNameParameter, dateCreateParameter);
        }
    
        public virtual int Add_Human(string mS, string displayName, Nullable<System.DateTime> dateOfBirth, Nullable<int> idGender, string address, string phone, string email, string urlAvatarHuman, Nullable<double> forfeit, Nullable<double> payFine, Nullable<double> compensation, Nullable<double> score, string note, Nullable<int> countDelete)
        {
            var mSParameter = mS != null ?
                new ObjectParameter("MS", mS) :
                new ObjectParameter("MS", typeof(string));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var idGenderParameter = idGender.HasValue ?
                new ObjectParameter("IdGender", idGender) :
                new ObjectParameter("IdGender", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var urlAvatarHumanParameter = urlAvatarHuman != null ?
                new ObjectParameter("UrlAvatarHuman", urlAvatarHuman) :
                new ObjectParameter("UrlAvatarHuman", typeof(string));
    
            var forfeitParameter = forfeit.HasValue ?
                new ObjectParameter("Forfeit", forfeit) :
                new ObjectParameter("Forfeit", typeof(double));
    
            var payFineParameter = payFine.HasValue ?
                new ObjectParameter("PayFine", payFine) :
                new ObjectParameter("PayFine", typeof(double));
    
            var compensationParameter = compensation.HasValue ?
                new ObjectParameter("Compensation", compensation) :
                new ObjectParameter("Compensation", typeof(double));
    
            var scoreParameter = score.HasValue ?
                new ObjectParameter("Score", score) :
                new ObjectParameter("Score", typeof(double));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_Human", mSParameter, displayNameParameter, dateOfBirthParameter, idGenderParameter, addressParameter, phoneParameter, emailParameter, urlAvatarHumanParameter, forfeitParameter, payFineParameter, compensationParameter, scoreParameter, noteParameter, countDeleteParameter);
        }
    
        public virtual int Add_Language(string displayName, string note, Nullable<int> countDelete)
        {
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_Language", displayNameParameter, noteParameter, countDeleteParameter);
        }
    
        public virtual int Add_Publisher(string displayName, string address, string phone, string email, string note, Nullable<double> score, Nullable<int> countDelete)
        {
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var scoreParameter = score.HasValue ?
                new ObjectParameter("Score", score) :
                new ObjectParameter("Score", typeof(double));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_Publisher", displayNameParameter, addressParameter, phoneParameter, emailParameter, noteParameter, scoreParameter, countDeleteParameter);
        }
    
        public virtual int Add_TimeTable(Nullable<int> idTimeLine, Nullable<int> idAuthorityStaff, Nullable<int> idHumanSunday, string checkIdHumanSundayWork, Nullable<int> idHumanMonday, string checkIdHumanMondayWork, Nullable<int> idHumanTuesday, string checkIdHumanTuesdayWork, Nullable<int> idHumanWednesday, string checkIdHumanWednesdayWork, Nullable<int> idHumanThursday, string checkIdHumanThursdayWork, Nullable<int> idHumanFriday, string checkIdHumanFridayWork, Nullable<int> idHumanSaturday, string checkIdHumanSaturdayWork, Nullable<int> countDelete, Nullable<System.DateTime> innitiatedDate, Nullable<System.DateTime> endDate)
        {
            var idTimeLineParameter = idTimeLine.HasValue ?
                new ObjectParameter("IdTimeLine", idTimeLine) :
                new ObjectParameter("IdTimeLine", typeof(int));
    
            var idAuthorityStaffParameter = idAuthorityStaff.HasValue ?
                new ObjectParameter("IdAuthorityStaff", idAuthorityStaff) :
                new ObjectParameter("IdAuthorityStaff", typeof(int));
    
            var idHumanSundayParameter = idHumanSunday.HasValue ?
                new ObjectParameter("IdHumanSunday", idHumanSunday) :
                new ObjectParameter("IdHumanSunday", typeof(int));
    
            var checkIdHumanSundayWorkParameter = checkIdHumanSundayWork != null ?
                new ObjectParameter("CheckIdHumanSundayWork", checkIdHumanSundayWork) :
                new ObjectParameter("CheckIdHumanSundayWork", typeof(string));
    
            var idHumanMondayParameter = idHumanMonday.HasValue ?
                new ObjectParameter("IdHumanMonday", idHumanMonday) :
                new ObjectParameter("IdHumanMonday", typeof(int));
    
            var checkIdHumanMondayWorkParameter = checkIdHumanMondayWork != null ?
                new ObjectParameter("CheckIdHumanMondayWork", checkIdHumanMondayWork) :
                new ObjectParameter("CheckIdHumanMondayWork", typeof(string));
    
            var idHumanTuesdayParameter = idHumanTuesday.HasValue ?
                new ObjectParameter("IdHumanTuesday", idHumanTuesday) :
                new ObjectParameter("IdHumanTuesday", typeof(int));
    
            var checkIdHumanTuesdayWorkParameter = checkIdHumanTuesdayWork != null ?
                new ObjectParameter("CheckIdHumanTuesdayWork", checkIdHumanTuesdayWork) :
                new ObjectParameter("CheckIdHumanTuesdayWork", typeof(string));
    
            var idHumanWednesdayParameter = idHumanWednesday.HasValue ?
                new ObjectParameter("IdHumanWednesday", idHumanWednesday) :
                new ObjectParameter("IdHumanWednesday", typeof(int));
    
            var checkIdHumanWednesdayWorkParameter = checkIdHumanWednesdayWork != null ?
                new ObjectParameter("CheckIdHumanWednesdayWork", checkIdHumanWednesdayWork) :
                new ObjectParameter("CheckIdHumanWednesdayWork", typeof(string));
    
            var idHumanThursdayParameter = idHumanThursday.HasValue ?
                new ObjectParameter("IdHumanThursday", idHumanThursday) :
                new ObjectParameter("IdHumanThursday", typeof(int));
    
            var checkIdHumanThursdayWorkParameter = checkIdHumanThursdayWork != null ?
                new ObjectParameter("CheckIdHumanThursdayWork", checkIdHumanThursdayWork) :
                new ObjectParameter("CheckIdHumanThursdayWork", typeof(string));
    
            var idHumanFridayParameter = idHumanFriday.HasValue ?
                new ObjectParameter("IdHumanFriday", idHumanFriday) :
                new ObjectParameter("IdHumanFriday", typeof(int));
    
            var checkIdHumanFridayWorkParameter = checkIdHumanFridayWork != null ?
                new ObjectParameter("CheckIdHumanFridayWork", checkIdHumanFridayWork) :
                new ObjectParameter("CheckIdHumanFridayWork", typeof(string));
    
            var idHumanSaturdayParameter = idHumanSaturday.HasValue ?
                new ObjectParameter("IdHumanSaturday", idHumanSaturday) :
                new ObjectParameter("IdHumanSaturday", typeof(int));
    
            var checkIdHumanSaturdayWorkParameter = checkIdHumanSaturdayWork != null ?
                new ObjectParameter("CheckIdHumanSaturdayWork", checkIdHumanSaturdayWork) :
                new ObjectParameter("CheckIdHumanSaturdayWork", typeof(string));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            var innitiatedDateParameter = innitiatedDate.HasValue ?
                new ObjectParameter("InnitiatedDate", innitiatedDate) :
                new ObjectParameter("InnitiatedDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_TimeTable", idTimeLineParameter, idAuthorityStaffParameter, idHumanSundayParameter, checkIdHumanSundayWorkParameter, idHumanMondayParameter, checkIdHumanMondayWorkParameter, idHumanTuesdayParameter, checkIdHumanTuesdayWorkParameter, idHumanWednesdayParameter, checkIdHumanWednesdayWorkParameter, idHumanThursdayParameter, checkIdHumanThursdayWorkParameter, idHumanFridayParameter, checkIdHumanFridayWorkParameter, idHumanSaturdayParameter, checkIdHumanSaturdayWorkParameter, countDeleteParameter, innitiatedDateParameter, endDateParameter);
        }
    
        public virtual int Add_UserHuman(Nullable<int> idHuman, string userName, string password, Nullable<System.DateTime> dateInitPass, Nullable<int> idStatusChangePass, Nullable<System.DateTime> datePasswordChange, string note, Nullable<int> countDelete)
        {
            var idHumanParameter = idHuman.HasValue ?
                new ObjectParameter("IdHuman", idHuman) :
                new ObjectParameter("IdHuman", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var dateInitPassParameter = dateInitPass.HasValue ?
                new ObjectParameter("DateInitPass", dateInitPass) :
                new ObjectParameter("DateInitPass", typeof(System.DateTime));
    
            var idStatusChangePassParameter = idStatusChangePass.HasValue ?
                new ObjectParameter("IdStatusChangePass", idStatusChangePass) :
                new ObjectParameter("IdStatusChangePass", typeof(int));
    
            var datePasswordChangeParameter = datePasswordChange.HasValue ?
                new ObjectParameter("DatePasswordChange", datePasswordChange) :
                new ObjectParameter("DatePasswordChange", typeof(System.DateTime));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_UserHuman", idHumanParameter, userNameParameter, passwordParameter, dateInitPassParameter, idStatusChangePassParameter, datePasswordChangeParameter, noteParameter, countDeleteParameter);
        }
    
        public virtual int Add_UserStaff(Nullable<int> idHuman, string userName, string password, string note, Nullable<int> scoreInputBook, Nullable<int> scoreOuputBook, Nullable<int> countDelete)
        {
            var idHumanParameter = idHuman.HasValue ?
                new ObjectParameter("IdHuman", idHuman) :
                new ObjectParameter("IdHuman", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var scoreInputBookParameter = scoreInputBook.HasValue ?
                new ObjectParameter("ScoreInputBook", scoreInputBook) :
                new ObjectParameter("ScoreInputBook", typeof(int));
    
            var scoreOuputBookParameter = scoreOuputBook.HasValue ?
                new ObjectParameter("ScoreOuputBook", scoreOuputBook) :
                new ObjectParameter("ScoreOuputBook", typeof(int));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_UserStaff", idHumanParameter, userNameParameter, passwordParameter, noteParameter, scoreInputBookParameter, scoreOuputBookParameter, countDeleteParameter);
        }
    
        public virtual ObjectResult<load_data_AuthorityHuman_Result> load_data_AuthorityHuman()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<load_data_AuthorityHuman_Result>("load_data_AuthorityHuman");
        }
    
        public virtual ObjectResult<load_data_AuthorityStaff_Result> load_data_AuthorityStaff()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<load_data_AuthorityStaff_Result>("load_data_AuthorityStaff");
        }
    
        public virtual ObjectResult<load_data_BillBookOfCustomer_Result> load_data_BillBookOfCustomer()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<load_data_BillBookOfCustomer_Result>("load_data_BillBookOfCustomer");
        }
    
        public virtual ObjectResult<load_data_BillBookOfHuman_Result> load_data_BillBookOfHuman()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<load_data_BillBookOfHuman_Result>("load_data_BillBookOfHuman");
        }
    
        public virtual int load_data_BillCustomerReturnBook()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("load_data_BillCustomerReturnBook");
        }
    
        public virtual ObjectResult<load_data_BillReturnBookHuman_Result> load_data_BillReturnBookHuman()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<load_data_BillReturnBookHuman_Result>("load_data_BillReturnBookHuman");
        }
    
        public virtual ObjectResult<load_data_Book_Result> load_data_Book()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<load_data_Book_Result>("load_data_Book");
        }
    
        public virtual int load_data_BorrowBook()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("load_data_BorrowBook");
        }
    
        public virtual ObjectResult<load_data_HistoryCreateTimeTable_Result> load_data_HistoryCreateTimeTable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<load_data_HistoryCreateTimeTable_Result>("load_data_HistoryCreateTimeTable");
        }
    
        public virtual ObjectResult<load_data_Human_Result> load_data_Human()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<load_data_Human_Result>("load_data_Human");
        }
    
        public virtual ObjectResult<load_data_ListBookCustomerBorrow_Result> load_data_ListBookCustomerBorrow()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<load_data_ListBookCustomerBorrow_Result>("load_data_ListBookCustomerBorrow");
        }
    
        public virtual ObjectResult<load_data_ListBookCustomerReturnBookLibrary_Result> load_data_ListBookCustomerReturnBookLibrary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<load_data_ListBookCustomerReturnBookLibrary_Result>("load_data_ListBookCustomerReturnBookLibrary");
        }
    
        public virtual int load_data_ListBookLibraryBorrow()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("load_data_ListBookLibraryBorrow");
        }
    
        public virtual ObjectResult<load_data_ListReturnBookHuman_Result> load_data_ListReturnBookHuman()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<load_data_ListReturnBookHuman_Result>("load_data_ListReturnBookHuman");
        }
    
        public virtual int load_data_Publishher()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("load_data_Publishher");
        }
    
        public virtual ObjectResult<load_data_Status_Result> load_data_Status()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<load_data_Status_Result>("load_data_Status");
        }
    
        public virtual ObjectResult<load_data_TimeTable_Result> load_data_TimeTable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<load_data_TimeTable_Result>("load_data_TimeTable");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int Update_Author(Nullable<int> id, string displayName, string address, string phone, string email, string note, Nullable<int> countDelete)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Author", idParameter, displayNameParameter, addressParameter, phoneParameter, emailParameter, noteParameter, countDeleteParameter);
        }
    
        public virtual int Update_BillBookOfCustomer(Nullable<int> idHuman, Nullable<int> idStaff, Nullable<System.DateTime> borrowedDate, Nullable<System.DateTime> dateOfRepayment, Nullable<double> cashReceived, Nullable<int> idStatusBill, string note, Nullable<int> countDelete)
        {
            var idHumanParameter = idHuman.HasValue ?
                new ObjectParameter("IdHuman", idHuman) :
                new ObjectParameter("IdHuman", typeof(int));
    
            var idStaffParameter = idStaff.HasValue ?
                new ObjectParameter("IdStaff", idStaff) :
                new ObjectParameter("IdStaff", typeof(int));
    
            var borrowedDateParameter = borrowedDate.HasValue ?
                new ObjectParameter("BorrowedDate", borrowedDate) :
                new ObjectParameter("BorrowedDate", typeof(System.DateTime));
    
            var dateOfRepaymentParameter = dateOfRepayment.HasValue ?
                new ObjectParameter("DateOfRepayment", dateOfRepayment) :
                new ObjectParameter("DateOfRepayment", typeof(System.DateTime));
    
            var cashReceivedParameter = cashReceived.HasValue ?
                new ObjectParameter("CashReceived", cashReceived) :
                new ObjectParameter("CashReceived", typeof(double));
    
            var idStatusBillParameter = idStatusBill.HasValue ?
                new ObjectParameter("IdStatusBill", idStatusBill) :
                new ObjectParameter("IdStatusBill", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_BillBookOfCustomer", idHumanParameter, idStaffParameter, borrowedDateParameter, dateOfRepaymentParameter, cashReceivedParameter, idStatusBillParameter, noteParameter, countDeleteParameter);
        }
    
        public virtual int Update_BillBookOfHuman(Nullable<int> idHuman, Nullable<int> idStaff, Nullable<System.DateTime> borrowedDate, Nullable<System.DateTime> dateOfRepayment, string note, Nullable<int> idStatusBill, Nullable<int> countDelete)
        {
            var idHumanParameter = idHuman.HasValue ?
                new ObjectParameter("IdHuman", idHuman) :
                new ObjectParameter("IdHuman", typeof(int));
    
            var idStaffParameter = idStaff.HasValue ?
                new ObjectParameter("IdStaff", idStaff) :
                new ObjectParameter("IdStaff", typeof(int));
    
            var borrowedDateParameter = borrowedDate.HasValue ?
                new ObjectParameter("BorrowedDate", borrowedDate) :
                new ObjectParameter("BorrowedDate", typeof(System.DateTime));
    
            var dateOfRepaymentParameter = dateOfRepayment.HasValue ?
                new ObjectParameter("DateOfRepayment", dateOfRepayment) :
                new ObjectParameter("DateOfRepayment", typeof(System.DateTime));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var idStatusBillParameter = idStatusBill.HasValue ?
                new ObjectParameter("IdStatusBill", idStatusBill) :
                new ObjectParameter("IdStatusBill", typeof(int));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_BillBookOfHuman", idHumanParameter, idStaffParameter, borrowedDateParameter, dateOfRepaymentParameter, noteParameter, idStatusBillParameter, countDeleteParameter);
        }
    
        public virtual int Update_BillCustomerReturnBookLibrary(Nullable<int> idHuman, Nullable<int> idStaff, Nullable<System.DateTime> dateOfRepayment, Nullable<double> allTheDepositAmount, Nullable<double> cashReceived, Nullable<double> customerFined, Nullable<double> allFines, Nullable<int> idStatusBill, string note, Nullable<int> countDelete)
        {
            var idHumanParameter = idHuman.HasValue ?
                new ObjectParameter("IdHuman", idHuman) :
                new ObjectParameter("IdHuman", typeof(int));
    
            var idStaffParameter = idStaff.HasValue ?
                new ObjectParameter("IdStaff", idStaff) :
                new ObjectParameter("IdStaff", typeof(int));
    
            var dateOfRepaymentParameter = dateOfRepayment.HasValue ?
                new ObjectParameter("DateOfRepayment", dateOfRepayment) :
                new ObjectParameter("DateOfRepayment", typeof(System.DateTime));
    
            var allTheDepositAmountParameter = allTheDepositAmount.HasValue ?
                new ObjectParameter("AllTheDepositAmount", allTheDepositAmount) :
                new ObjectParameter("AllTheDepositAmount", typeof(double));
    
            var cashReceivedParameter = cashReceived.HasValue ?
                new ObjectParameter("CashReceived", cashReceived) :
                new ObjectParameter("CashReceived", typeof(double));
    
            var customerFinedParameter = customerFined.HasValue ?
                new ObjectParameter("CustomerFined", customerFined) :
                new ObjectParameter("CustomerFined", typeof(double));
    
            var allFinesParameter = allFines.HasValue ?
                new ObjectParameter("AllFines", allFines) :
                new ObjectParameter("AllFines", typeof(double));
    
            var idStatusBillParameter = idStatusBill.HasValue ?
                new ObjectParameter("IdStatusBill", idStatusBill) :
                new ObjectParameter("IdStatusBill", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_BillCustomerReturnBookLibrary", idHumanParameter, idStaffParameter, dateOfRepaymentParameter, allTheDepositAmountParameter, cashReceivedParameter, customerFinedParameter, allFinesParameter, idStatusBillParameter, noteParameter, countDeleteParameter);
        }
    
        public virtual int Update_BillReturnBookHuman(Nullable<int> idHuman, Nullable<int> idStaff, Nullable<System.DateTime> dateOfRepayment, Nullable<int> idStatusBill, Nullable<double> libraryFined, string note, Nullable<int> countDelete)
        {
            var idHumanParameter = idHuman.HasValue ?
                new ObjectParameter("IdHuman", idHuman) :
                new ObjectParameter("IdHuman", typeof(int));
    
            var idStaffParameter = idStaff.HasValue ?
                new ObjectParameter("IdStaff", idStaff) :
                new ObjectParameter("IdStaff", typeof(int));
    
            var dateOfRepaymentParameter = dateOfRepayment.HasValue ?
                new ObjectParameter("DateOfRepayment", dateOfRepayment) :
                new ObjectParameter("DateOfRepayment", typeof(System.DateTime));
    
            var idStatusBillParameter = idStatusBill.HasValue ?
                new ObjectParameter("IdStatusBill", idStatusBill) :
                new ObjectParameter("IdStatusBill", typeof(int));
    
            var libraryFinedParameter = libraryFined.HasValue ?
                new ObjectParameter("LibraryFined", libraryFined) :
                new ObjectParameter("LibraryFined", typeof(double));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_BillReturnBookHuman", idHumanParameter, idStaffParameter, dateOfRepaymentParameter, idStatusBillParameter, libraryFinedParameter, noteParameter, countDeleteParameter);
        }
    
        public virtual int Update_Book(Nullable<int> id, string displayName, Nullable<double> bookPrice, Nullable<int> borrowingIdHuman, string bookSubject, string author, Nullable<int> idLanguage, Nullable<int> idPublisher, Nullable<int> idStatus, Nullable<int> idStatusReturnBookToHuman, Nullable<System.DateTime> libraryDateBorrowed, Nullable<System.DateTime> libraryDueDate, string color, Nullable<System.DateTime> dateReturnBookToHuman, string urlImageBook, string note, Nullable<int> countDelete)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var bookPriceParameter = bookPrice.HasValue ?
                new ObjectParameter("BookPrice", bookPrice) :
                new ObjectParameter("BookPrice", typeof(double));
    
            var borrowingIdHumanParameter = borrowingIdHuman.HasValue ?
                new ObjectParameter("BorrowingIdHuman", borrowingIdHuman) :
                new ObjectParameter("BorrowingIdHuman", typeof(int));
    
            var bookSubjectParameter = bookSubject != null ?
                new ObjectParameter("BookSubject", bookSubject) :
                new ObjectParameter("BookSubject", typeof(string));
    
            var authorParameter = author != null ?
                new ObjectParameter("Author", author) :
                new ObjectParameter("Author", typeof(string));
    
            var idLanguageParameter = idLanguage.HasValue ?
                new ObjectParameter("IdLanguage", idLanguage) :
                new ObjectParameter("IdLanguage", typeof(int));
    
            var idPublisherParameter = idPublisher.HasValue ?
                new ObjectParameter("IdPublisher", idPublisher) :
                new ObjectParameter("IdPublisher", typeof(int));
    
            var idStatusParameter = idStatus.HasValue ?
                new ObjectParameter("IdStatus", idStatus) :
                new ObjectParameter("IdStatus", typeof(int));
    
            var idStatusReturnBookToHumanParameter = idStatusReturnBookToHuman.HasValue ?
                new ObjectParameter("IdStatusReturnBookToHuman", idStatusReturnBookToHuman) :
                new ObjectParameter("IdStatusReturnBookToHuman", typeof(int));
    
            var libraryDateBorrowedParameter = libraryDateBorrowed.HasValue ?
                new ObjectParameter("LibraryDateBorrowed", libraryDateBorrowed) :
                new ObjectParameter("LibraryDateBorrowed", typeof(System.DateTime));
    
            var libraryDueDateParameter = libraryDueDate.HasValue ?
                new ObjectParameter("LibraryDueDate", libraryDueDate) :
                new ObjectParameter("LibraryDueDate", typeof(System.DateTime));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var dateReturnBookToHumanParameter = dateReturnBookToHuman.HasValue ?
                new ObjectParameter("DateReturnBookToHuman", dateReturnBookToHuman) :
                new ObjectParameter("DateReturnBookToHuman", typeof(System.DateTime));
    
            var urlImageBookParameter = urlImageBook != null ?
                new ObjectParameter("UrlImageBook", urlImageBook) :
                new ObjectParameter("UrlImageBook", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Book", idParameter, displayNameParameter, bookPriceParameter, borrowingIdHumanParameter, bookSubjectParameter, authorParameter, idLanguageParameter, idPublisherParameter, idStatusParameter, idStatusReturnBookToHumanParameter, libraryDateBorrowedParameter, libraryDueDateParameter, colorParameter, dateReturnBookToHumanParameter, urlImageBookParameter, noteParameter, countDeleteParameter);
        }
    
        public virtual int Update_BookSubject(Nullable<int> id, string displayName, Nullable<int> scoreInputSubject, Nullable<int> scoreOuputSubject, string note, Nullable<int> countDelete)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var scoreInputSubjectParameter = scoreInputSubject.HasValue ?
                new ObjectParameter("ScoreInputSubject", scoreInputSubject) :
                new ObjectParameter("ScoreInputSubject", typeof(int));
    
            var scoreOuputSubjectParameter = scoreOuputSubject.HasValue ?
                new ObjectParameter("ScoreOuputSubject", scoreOuputSubject) :
                new ObjectParameter("ScoreOuputSubject", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_BookSubject", idParameter, displayNameParameter, scoreInputSubjectParameter, scoreOuputSubjectParameter, noteParameter, countDeleteParameter);
        }
    
        public virtual int Update_BorrowBooks(Nullable<int> idHuman, Nullable<int> idBook, Nullable<System.DateTime> dateBorrowed, Nullable<System.DateTime> dueDate, Nullable<int> idStatus, Nullable<int> idFined, string color, Nullable<double> contractualFine, string note, Nullable<int> countDelete)
        {
            var idHumanParameter = idHuman.HasValue ?
                new ObjectParameter("IdHuman", idHuman) :
                new ObjectParameter("IdHuman", typeof(int));
    
            var idBookParameter = idBook.HasValue ?
                new ObjectParameter("IdBook", idBook) :
                new ObjectParameter("IdBook", typeof(int));
    
            var dateBorrowedParameter = dateBorrowed.HasValue ?
                new ObjectParameter("DateBorrowed", dateBorrowed) :
                new ObjectParameter("DateBorrowed", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var idStatusParameter = idStatus.HasValue ?
                new ObjectParameter("IdStatus", idStatus) :
                new ObjectParameter("IdStatus", typeof(int));
    
            var idFinedParameter = idFined.HasValue ?
                new ObjectParameter("IdFined", idFined) :
                new ObjectParameter("IdFined", typeof(int));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var contractualFineParameter = contractualFine.HasValue ?
                new ObjectParameter("ContractualFine", contractualFine) :
                new ObjectParameter("ContractualFine", typeof(double));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_BorrowBooks", idHumanParameter, idBookParameter, dateBorrowedParameter, dueDateParameter, idStatusParameter, idFinedParameter, colorParameter, contractualFineParameter, noteParameter, countDeleteParameter);
        }
    
        public virtual int Update_HistoryCreateTimeTable(Nullable<int> idUserStaff, string displayName, Nullable<System.DateTime> dateCreate)
        {
            var idUserStaffParameter = idUserStaff.HasValue ?
                new ObjectParameter("IdUserStaff", idUserStaff) :
                new ObjectParameter("IdUserStaff", typeof(int));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var dateCreateParameter = dateCreate.HasValue ?
                new ObjectParameter("DateCreate", dateCreate) :
                new ObjectParameter("DateCreate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_HistoryCreateTimeTable", idUserStaffParameter, displayNameParameter, dateCreateParameter);
        }
    
        public virtual int Update_Human(string mS, string displayName, Nullable<System.DateTime> dateOfBirth, Nullable<int> idGender, string address, string phone, string email, string urlAvatarHuman, Nullable<double> forfeit, Nullable<double> payFine, Nullable<double> compensation, Nullable<double> score, string note, Nullable<int> countDelete)
        {
            var mSParameter = mS != null ?
                new ObjectParameter("MS", mS) :
                new ObjectParameter("MS", typeof(string));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var idGenderParameter = idGender.HasValue ?
                new ObjectParameter("IdGender", idGender) :
                new ObjectParameter("IdGender", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var urlAvatarHumanParameter = urlAvatarHuman != null ?
                new ObjectParameter("UrlAvatarHuman", urlAvatarHuman) :
                new ObjectParameter("UrlAvatarHuman", typeof(string));
    
            var forfeitParameter = forfeit.HasValue ?
                new ObjectParameter("Forfeit", forfeit) :
                new ObjectParameter("Forfeit", typeof(double));
    
            var payFineParameter = payFine.HasValue ?
                new ObjectParameter("PayFine", payFine) :
                new ObjectParameter("PayFine", typeof(double));
    
            var compensationParameter = compensation.HasValue ?
                new ObjectParameter("Compensation", compensation) :
                new ObjectParameter("Compensation", typeof(double));
    
            var scoreParameter = score.HasValue ?
                new ObjectParameter("Score", score) :
                new ObjectParameter("Score", typeof(double));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Human", mSParameter, displayNameParameter, dateOfBirthParameter, idGenderParameter, addressParameter, phoneParameter, emailParameter, urlAvatarHumanParameter, forfeitParameter, payFineParameter, compensationParameter, scoreParameter, noteParameter, countDeleteParameter);
        }
    
        public virtual int Update_Language(Nullable<int> id, string displayName, string note, Nullable<int> countDelete)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Language", idParameter, displayNameParameter, noteParameter, countDeleteParameter);
        }
    
        public virtual int Update_Publisher(Nullable<int> id, string displayName, string address, string phone, string email, string note, Nullable<double> score, Nullable<int> countDelete)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var scoreParameter = score.HasValue ?
                new ObjectParameter("Score", score) :
                new ObjectParameter("Score", typeof(double));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Publisher", idParameter, displayNameParameter, addressParameter, phoneParameter, emailParameter, noteParameter, scoreParameter, countDeleteParameter);
        }
    
        public virtual int Update_TimeTable(Nullable<int> idTimeLine, Nullable<int> idAuthorityStaff, Nullable<int> idHumanSunday, string checkIdHumanSundayWork, Nullable<int> idHumanMonday, string checkIdHumanMondayWork, Nullable<int> idHumanTuesday, string checkIdHumanTuesdayWork, Nullable<int> idHumanWednesday, string checkIdHumanWednesdayWork, Nullable<int> idHumanThursday, string checkIdHumanThursdayWork, Nullable<int> idHumanFriday, string checkIdHumanFridayWork, Nullable<int> idHumanSaturday, string checkIdHumanSaturdayWork, Nullable<int> countDelete, Nullable<System.DateTime> innitiatedDate, Nullable<System.DateTime> endDate)
        {
            var idTimeLineParameter = idTimeLine.HasValue ?
                new ObjectParameter("IdTimeLine", idTimeLine) :
                new ObjectParameter("IdTimeLine", typeof(int));
    
            var idAuthorityStaffParameter = idAuthorityStaff.HasValue ?
                new ObjectParameter("IdAuthorityStaff", idAuthorityStaff) :
                new ObjectParameter("IdAuthorityStaff", typeof(int));
    
            var idHumanSundayParameter = idHumanSunday.HasValue ?
                new ObjectParameter("IdHumanSunday", idHumanSunday) :
                new ObjectParameter("IdHumanSunday", typeof(int));
    
            var checkIdHumanSundayWorkParameter = checkIdHumanSundayWork != null ?
                new ObjectParameter("CheckIdHumanSundayWork", checkIdHumanSundayWork) :
                new ObjectParameter("CheckIdHumanSundayWork", typeof(string));
    
            var idHumanMondayParameter = idHumanMonday.HasValue ?
                new ObjectParameter("IdHumanMonday", idHumanMonday) :
                new ObjectParameter("IdHumanMonday", typeof(int));
    
            var checkIdHumanMondayWorkParameter = checkIdHumanMondayWork != null ?
                new ObjectParameter("CheckIdHumanMondayWork", checkIdHumanMondayWork) :
                new ObjectParameter("CheckIdHumanMondayWork", typeof(string));
    
            var idHumanTuesdayParameter = idHumanTuesday.HasValue ?
                new ObjectParameter("IdHumanTuesday", idHumanTuesday) :
                new ObjectParameter("IdHumanTuesday", typeof(int));
    
            var checkIdHumanTuesdayWorkParameter = checkIdHumanTuesdayWork != null ?
                new ObjectParameter("CheckIdHumanTuesdayWork", checkIdHumanTuesdayWork) :
                new ObjectParameter("CheckIdHumanTuesdayWork", typeof(string));
    
            var idHumanWednesdayParameter = idHumanWednesday.HasValue ?
                new ObjectParameter("IdHumanWednesday", idHumanWednesday) :
                new ObjectParameter("IdHumanWednesday", typeof(int));
    
            var checkIdHumanWednesdayWorkParameter = checkIdHumanWednesdayWork != null ?
                new ObjectParameter("CheckIdHumanWednesdayWork", checkIdHumanWednesdayWork) :
                new ObjectParameter("CheckIdHumanWednesdayWork", typeof(string));
    
            var idHumanThursdayParameter = idHumanThursday.HasValue ?
                new ObjectParameter("IdHumanThursday", idHumanThursday) :
                new ObjectParameter("IdHumanThursday", typeof(int));
    
            var checkIdHumanThursdayWorkParameter = checkIdHumanThursdayWork != null ?
                new ObjectParameter("CheckIdHumanThursdayWork", checkIdHumanThursdayWork) :
                new ObjectParameter("CheckIdHumanThursdayWork", typeof(string));
    
            var idHumanFridayParameter = idHumanFriday.HasValue ?
                new ObjectParameter("IdHumanFriday", idHumanFriday) :
                new ObjectParameter("IdHumanFriday", typeof(int));
    
            var checkIdHumanFridayWorkParameter = checkIdHumanFridayWork != null ?
                new ObjectParameter("CheckIdHumanFridayWork", checkIdHumanFridayWork) :
                new ObjectParameter("CheckIdHumanFridayWork", typeof(string));
    
            var idHumanSaturdayParameter = idHumanSaturday.HasValue ?
                new ObjectParameter("IdHumanSaturday", idHumanSaturday) :
                new ObjectParameter("IdHumanSaturday", typeof(int));
    
            var checkIdHumanSaturdayWorkParameter = checkIdHumanSaturdayWork != null ?
                new ObjectParameter("CheckIdHumanSaturdayWork", checkIdHumanSaturdayWork) :
                new ObjectParameter("CheckIdHumanSaturdayWork", typeof(string));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            var innitiatedDateParameter = innitiatedDate.HasValue ?
                new ObjectParameter("InnitiatedDate", innitiatedDate) :
                new ObjectParameter("InnitiatedDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_TimeTable", idTimeLineParameter, idAuthorityStaffParameter, idHumanSundayParameter, checkIdHumanSundayWorkParameter, idHumanMondayParameter, checkIdHumanMondayWorkParameter, idHumanTuesdayParameter, checkIdHumanTuesdayWorkParameter, idHumanWednesdayParameter, checkIdHumanWednesdayWorkParameter, idHumanThursdayParameter, checkIdHumanThursdayWorkParameter, idHumanFridayParameter, checkIdHumanFridayWorkParameter, idHumanSaturdayParameter, checkIdHumanSaturdayWorkParameter, countDeleteParameter, innitiatedDateParameter, endDateParameter);
        }
    
        public virtual int Update_UserHuman(Nullable<int> idHuman, string userName, string password, Nullable<System.DateTime> dateInitPass, Nullable<int> idStatusChangePass, Nullable<System.DateTime> datePasswordChange, string note, Nullable<int> countDelete)
        {
            var idHumanParameter = idHuman.HasValue ?
                new ObjectParameter("IdHuman", idHuman) :
                new ObjectParameter("IdHuman", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var dateInitPassParameter = dateInitPass.HasValue ?
                new ObjectParameter("DateInitPass", dateInitPass) :
                new ObjectParameter("DateInitPass", typeof(System.DateTime));
    
            var idStatusChangePassParameter = idStatusChangePass.HasValue ?
                new ObjectParameter("IdStatusChangePass", idStatusChangePass) :
                new ObjectParameter("IdStatusChangePass", typeof(int));
    
            var datePasswordChangeParameter = datePasswordChange.HasValue ?
                new ObjectParameter("DatePasswordChange", datePasswordChange) :
                new ObjectParameter("DatePasswordChange", typeof(System.DateTime));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_UserHuman", idHumanParameter, userNameParameter, passwordParameter, dateInitPassParameter, idStatusChangePassParameter, datePasswordChangeParameter, noteParameter, countDeleteParameter);
        }
    
        public virtual int Update_UserStaff(Nullable<int> idHuman, string userName, string password, string note, Nullable<int> scoreInputBook, Nullable<int> scoreOuputBook, Nullable<int> countDelete)
        {
            var idHumanParameter = idHuman.HasValue ?
                new ObjectParameter("IdHuman", idHuman) :
                new ObjectParameter("IdHuman", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var scoreInputBookParameter = scoreInputBook.HasValue ?
                new ObjectParameter("ScoreInputBook", scoreInputBook) :
                new ObjectParameter("ScoreInputBook", typeof(int));
    
            var scoreOuputBookParameter = scoreOuputBook.HasValue ?
                new ObjectParameter("ScoreOuputBook", scoreOuputBook) :
                new ObjectParameter("ScoreOuputBook", typeof(int));
    
            var countDeleteParameter = countDelete.HasValue ?
                new ObjectParameter("CountDelete", countDelete) :
                new ObjectParameter("CountDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_UserStaff", idHumanParameter, userNameParameter, passwordParameter, noteParameter, scoreInputBookParameter, scoreOuputBookParameter, countDeleteParameter);
        }
    }
}
